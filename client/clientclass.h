#ifndef CLIENTCLASS_H
#define CLIENTCLASS_H
#include <QTcpSocket>
#include <QHostAddress>
#include "generatemessage.h"

/**
 * @brief  کلاس مدیریت اتصال در سمت کلاینت
 *
 * اطلاعت کاربر و سرور را صحت‌سنجی و در خود ذخیره می‌کند
 * <br>
 * همچنین امکان ارسال درخواست به سرور و تحلیل پاسخ دریافتی را فراهم می‌سازد
 *
 */
class ClientClassTcp
{
public:


    /**
     * @brief پاسخ سرور
     */
    QList<int>server_anserData;

    /**
     * @brief سازندهٔ پیش‌فرض کلاس مدیریت اتصال کلاینت
     *
     * این سازنده به‌صورت پیشفرض آی‌پی سرور را براربر با ۱۲۷/۰/۰/۲  و شماره درگاه را برابر با ۱۲۳۴۵ تنظیم می‌کند
     */
    ClientClassTcp();

    /**
     * @brief ارسال درخواست به سرور و پردازش پاسخ دریافتی
     *
     * این تابع بر اساس کد پیام و پارامترهای ورودی، پیامی برای سرور تولید و ارسال می‌کند
     * <br>
     * - اگر کد پیام برابر با ۱ باشد: درخواست احراز هویت ارسال شده در صورت ورود موفق
     *   <br>
     *   توکن دریافتی ذخیره می‌گردد و وضعیت ورود تأیید می‌شود
     *
     * - اگر کد پیام برابر با ۲ باشد: درخواست داده ارسال شده و پاسخ عددی سرور تجزیه شده و به‌صورت لیستی از اعداد ذخیره می‌گردد
     *
     * - در صورت عدم دریافت پاسخ یا قطع ارتباط، وضعیت اتصال غیرفعال می‌شود
     *
     * @param message_type کد نوع پیام (برای تعیین نوع درخواست به سرور)
     * @param messageParams لیستی از پارامترهای مورد نیاز برای تشکیل پیام ارسالی
     */
    void handle_client_request(int message_type, QStringList messageParams);

    // *************** Variable  *****************

    /**
     * @brief وضعیت اتصال به سرور
     *
     * اگر کلاینت با موفقیت به سرور متصل شده باشد، مقدار این متغیر برابر با «درست» خواهد بود
     * <br>
     * در غیر این صورت، مقدار آن «نادرست» است
     */
    bool Connection = false;

    /**
     * @brief وضعیت اعتبارسنجی نام کاربری و رمز عبور
     *
     * اگر ورود کاربر با موفقیت انجام شود (نام کاربری و رمز صحیح باشند)
     * <br>
     * مقدار این متغیر «درست» خواهد بود؛ در غیر این صورت، «نادرست» باقی می‌ماند
     */
    bool passwordAndUsername = false;

    /**
     * @brief شماره پورت سرور هدف
     */
    quint16 _serverPort;

    /**
     * @brief آی‌پی سرور هدف
     */
    QString _serverIP = "";

    /**
     * @brief نام کاربری برای ورود
     */
    QString _userName = "";

    /**
     * @brief رمز عبور برای ورود
     */
    QString _passWord = "";

    /**
     * @brief توکن احراز هویت دریافتی از سرور پس از ورود موفق
     */
    QString token = "";

private:


    /**
     * @brief بررسی معتبر بودن آی‌پی
     *
     * @return  (true: موفق، false: ناموفق)
     */
    bool isValidIp();

    /**
     * @brief بررسی معتبر بودن شماره پورت
     *
     * @return  (true: موفق، false: ناموفق)
     */
    bool isValidPort();

    /**
     * @brief بررسی امکان اتصال به سرور
     *
     *  این تابع تلاش می‌کند به آی‌پی و پورت مشخص شده برای سرور اتصال برقرارکند
     *
     * @return وضعیت اتصال (true: موفق، false: ناموفق)
     */
    bool canConnectToServer();

    /**
     * @brief ارسال درخواست به سرور و دریافت پاسخ
     *
     *  بررسی امکان اتصال به سرور
     *  <br>
     * سپس پیامی که توسط مولد پیام تولید شده را به سرور ارسال می‌کند
     * <br>
     * پس از ارسال، تا ۳ ثانیه منتظر دریافت پاسخ می‌ماند اگر پاسخ دریافت شود، آن را بازمی‌گرداند
     * در غیر این صورت، پیغام خطای مربوطه برگشت داده می‌شود
     *
     * @return پاسخ دریافتی از سرور به‌صورت رشته
     * در صورت عدم موفقیت، یکی از پیام‌های خطا مانند:
     * - "Connection failed"
     * - "time out from server"
     */
    QString send_client_request();


    // *************** Variable  *****************

    /**
     * @brief تولید کننده پیام برای ساخت و ارسال درخواست‌های کلاینت
     */
    generateMessage _generater;
};

#endif // CLIENTCLASS_H
